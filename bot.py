from pyrogram import Client, filters, idle
from pyrogram.enums import ParseMode
import importlib
from datetime import datetime, timedelta
import time, random
import configparser, asyncio
import os, sys, subprocess
import signal, requests
from meval import meval

os.makedirs("modules", exist_ok=True)

if not os.path.exists("userbot.cfg"):
    config = configparser.ConfigParser()
    config['HACK337_USERBOT'] = {
        'api_id': 'YOUR_API_ID',
        'api_hash': 'YOUR_API_HASH',
        'prefix_userbot': '.,—é'
    }
    with open('userbot.cfg', 'w', encoding = "utf-8") as configfile:
        config.write(configfile)
    print("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª 'userbot.cfg'. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥!")
    exit()

config = configparser.ConfigParser()
config.read('userbot.cfg', "utf-8")

api_id = int(config['HACK337_USERBOT']['api_id'])
api_hash = config['HACK337_USERBOT']['api_hash']
prefix_userbot = config['HACK337_USERBOT']['prefix_userbot'].split(',')

app = Client("my_account2", api_id=api_id, api_hash=api_hash)
start_time = time.time()

message_id, chat_id, time_int, success, fail = None, None, None, 0, 0

cats = [ "‚âΩ^‚Ä¢‚©ä‚Ä¢^‚âº", "·ìö‚Çç ^. .^‚Çé", "‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö" ]

processes = {}

info_media = {"type": "photo", "file_id": "https://i.imgur.com/jR5ABCc.png"}

def load_modules():
    modules = []
    amount_modules = 0
    sys.path.append(os.path.abspath("modules"))
    for f in os.listdir("modules"):
        if f.endswith(".py"):
            module_name = f[:-3]
            try:
                module = importlib.import_module(module_name)
                for command in module.commands:
                    modules.append((command['cicon'] ,command['cinfo'], command['ccomand']))
                amount_modules+=1
            except Exception as e:
                print(f"Failed to read module {module_name} info: {e}")
    return modules, amount_modules

def install_package(package_name):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])

def restart_script(m_id, chat_id):
    current_time = int(time.time())
    python = sys.executable
    os.execl(
        python,
        python,
        *sys.argv,
        "--message_id",
        str(m_id),
        "--chat_id",
        str(chat_id),
        "--time",
        str(current_time),
    )


@app.on_message(filters.me & filters.command(["help", "—Ö–µ–ª–ø", "—Ä—É–¥–∑"], prefixes=prefix_userbot))
async def help_command(client, message):
    await message.delete()
    modules, amount_modules = load_modules()
    prefix = prefix_userbot[0]
    help_text = "**–ú–æ–¥—É–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {}**\n".format(amount_modules)
    for cicon, cinfo, ccomand in modules:
        help_text += f"{cicon}`{prefix}{cinfo}` - {ccomand}\n"
    help_text += (f"**–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                  f"‚Ñπ`{prefix}info` - –∏–Ω—Ñ–æ –æ —é–∑–µ—Ä–±–æ—Ç–µ\n"
                  f"‚åõ`{prefix}ping` - –ü–∏—à–µ—Ç –ø–∏–Ω–≥\n"
                  f"üîÑ`{prefix}restart` - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞\n"
                  f"üìü`{prefix}e` - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞\n"
                  f"‚å®Ô∏è`{prefix}t` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏—Å—Ç–µ–º–µ\n"
                  f"‚õî`{prefix}kill` - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n"
                  f"üÜï`{prefix}update` - –û–±–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç\n"
                  f"üì•`{prefix}lm` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å\n"
                  f"üóëÔ∏è`{prefix}ulm` - –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å\n"
                 )
    await message.reply_text(help_text)


@app.on_message(filters.me & filters.command(["info","–∏–Ω—Ñ–æ","—à—Ç–∞—â"], prefixes=prefix_userbot))
async def info_command(_, message):
    global info_media
    if len(message.text.split(" ")) == 2 and message.reply_to_message:
        cmd = message.text.split(" ",1)[1]
        repl = message.reply_to_message
        if cmd == "img" and repl.photo:
            if repl.photo:
                file_id = repl.photo.file_id
                info_media = {"type": "photo", "file_id": file_id}
        elif cmd == "img" and repl.animation:
            file_id = repl.animation.file_id
            info_media = {"type": "gif", "file_id": file_id}
        else:
            info_media = {"type": "photo", "file_id": "https://i.imgur.com/jR5ABCc.png"}
    
    current_time = time.time()
    uptime_seconds = int(round(current_time - start_time))
    uptime = str(timedelta(seconds=uptime_seconds))
    ping_start_time = time.time()
    await message.delete()
    ping_end_time = time.time()
    ping_time = round((ping_end_time - ping_start_time) * 1000, 1)
    bot_name = "ü§ñHack337 UserBot v2.0 Proü§ñ\nTG: https://t.me/hack337userbot"
    caption = f"```info\n{bot_name}\nPing: {ping_time}ms\nUptime: {uptime}```"
    if info_media:
        if info_media["type"] == "photo":
            await app.send_photo(
                chat_id=message.chat.id,
                photo=info_media["file_id"],
                caption=caption,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await app.send_animation(
                chat_id=message.chat.id,
                animation=info_media["file_id"],
                caption=caption,
                parse_mode=ParseMode.MARKDOWN
            )

@app.on_message(filters.me & filters.command(["restart","—Ä–µ—Å—Ç–∞—Ä—Ç","–∫—É—ã–µ—Ñ–∫–µ", "–∫—ã–µ", "rst"], prefixes=prefix_userbot))
async def evaluate(client, message):
    msg = await message.edit('**üîÑ –¢–≤–æ–π Hack337 UserBot –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...**')
    restart_script(msg.id, msg.chat.id)

@app.on_message(filters.me & filters.command(["lm", "–ª–º", "–¥—å"], prefixes=prefix_userbot))
def load_module_msg(client, message):
    reply = message.reply_to_message
    if reply and reply.document:
        name = reply.document.file_name
        if name.endswith(".py"):
            if not os.path.exists("modules/" + name):
                message.edit(f"```lm\n –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è... \n```")
                reply._client.download_media( reply.document.file_id , "modules/" + name)
                message.edit(f"```lm\n –ü–æ–∏—Å–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π... \n```")
                with open("modules/" + name, 'r') as file:
                    lines = []
                    for _ in range(3):
                        line = file.readline()
                        if not line:
                            break
                        lines.append(line.strip())
                errors = []
                for line in lines:
                    if line.startswith("# requires: "):
                        pips = line.replace("# requires: ", "").split(" ")
                        message.edit(f"```lm\n –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π... \n```")
                        for package_name in pips:
                            try:
                                install_package(package_name)
                            except Exception as e:
                                errors.append(package_name)
                                message.edit(f"```lm\n –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package_name}... \n```")
                if errors:
                    message.edit(f"```lm\n –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {', '.join(errors)} \n```")
                else:
                    message.edit(f"```lm\n –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. \n```")
            else:
                message.edit(f"```lm\n –¢–∞–∫–æ–π –º–æ–¥—É–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. \n```")

@app.on_message(filters.me & filters.command(["ulm", "—É–ª–º", "–≥–¥—å"], prefixes=prefix_userbot))
def unload_module_msg(client, message):
    if len(message.text.split(" ")) == 2:
        mname = message.text.split(" ",1)[1]+".py"
        if os.path.exists("modules/" + mname):
            message.edit(f"```ulm\n –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è... \n```")
            try:
                os.remove("modules/" + mname)
            except Exception as e:
                message.edit(f"```ulm\n –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {mname}... \n```")
            message.edit(f"```ulm\n –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. \n```")
        else:
            message.edit(f"```ulm\n –¢–∞–∫–æ–π –º–æ–¥—É–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. \n```")
    else:
        message.edit(f"```ulm\n –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. \n```")

@app.on_message(filters.me & filters.command(["ping", "–ø–∏–Ω–≥", "–∑—à—Ç–ø"], prefixes=prefix_userbot))
def ping(_, message):
    ping_start_time = time.time()
    msg = message.edit("üåï")
    ping_end_time = time.time()
    ping_time = round((ping_end_time - ping_start_time) * 1000)
    uptime_seconds = int(round(time.time() - start_time))
    uptime = str(timedelta(seconds=uptime_seconds))
    msg.edit(f"```ping\n üïõ–í–∞—à –ø–∏–Ω–≥: {ping_time} –º—Å\nUptime: {uptime} \n```")

@app.on_message(filters.me & filters.command(["–≥–∑–≤", "upd", "update"], prefixes=prefix_userbot))
def update(_, message):
    try:
        message.edit(f"```update\n –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è... \n```")
        response = requests.get("https://raw.githubusercontent.com/y9hack337/uBot/main/bot.py")
        response.raise_for_status()
        message.edit(f"```update\n –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª... \n```")
        with open("bot.py", "wb") as f:
            f.write(response.content)
        message.edit(f"```update\n –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ. \n –ù–∞–ø–∏—à–∏ .rst —á—Ç–æ –±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.```")
    except requests.exceptions.RequestException as e:
        message.edit(f"```update\n –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å GitHub... \n```")
    except OSError as e:
        message.edit(f"```update\n –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞... \n```")
    except:
        message.edit(f"```update\n –û—à–∏–±–∫–∞... \n```")

async def getattrs(client, message):
    reply = message.reply_to_message
    return {
        "message": message,
        "reply": reply,
        "r": reply,
        "event": message,
        "chat": message.chat,
        "m": message,
        "c": client,
        "client": client,
        "app": client,
    }

@app.on_message(filters.me & filters.command(["eval","e"], prefixes=prefix_userbot))
async def evaluate(client, message):
    try:
        result = await meval(
            message.text.split(" ",1)[1],
            globals(),
            **await getattrs(client, message),
        )
    except Exception as e:
        await message.reply_text(f"Error {e}")
        return
    if callable(getattr(result, "stringify", None)):
        result = str(result.stringify())
    await message.reply_text(f'Request: \n{message.text.split(" ",1)[1]}\nResult:\n{str(result)}', parse_mode=ParseMode.DISABLED)

@app.on_message(filters.me & filters.command(["terminal", "t"], prefixes=prefix_userbot))
async def terminal_command(client, message):
    try:
        command = message.text.split(" ", 1)[1]
        process = await asyncio.create_subprocess_shell(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        processes[str(message.id)] = process
        await message.edit_text(f"‚å®Ô∏è<b> –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: </b><code>{command}</code>\n<b>–ü—Ä–æ—Ü–µ—Å—Å ID: </b><code>{process.pid}</code>", parse_mode=ParseMode.HTML)
        stdout, stderr = await process.communicate()
        result = stdout.decode('utf-8').strip()
        error = stderr.decode('utf-8').strip()
        return_code = process.returncode
        output = f"üìº<b> –í—ã–≤–æ–¥:</b>\n<code>{result if result else '–ù–µ—Ç –≤—ã–≤–æ–¥–∞'}</code>"
        if error:
            output += f"\n–û—à–∏–±–∫–∞:\n{error}"
        await message.edit_text(f"‚å®Ô∏è<b> –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: </b><code>{command}</code>\n<b>–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: </b><code>{return_code}</code>\n{output}", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.edit_text(f"<b>–û—à–∏–±–∫–∞: </b><code>{e}</code>", parse_mode=ParseMode.HTML)
    try:
        processes.pop(str(message.id))
    except:pass


@app.on_message(filters.me & filters.command(["terminate", "kill"], prefixes=prefix_userbot))
async def terminate_process(client, message):
    try:
        force_kill = "-f" in message.text
        reply = message.reply_to_message
        if not reply or str(reply.id) not in processes:
            await message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.", parse_mode=ParseMode.HTML)
            return
        process = processes.pop(str(reply.id))
        pid = process.pid
        if force_kill:
            os.kill(pid, signal.SIGKILL)
            await message.edit_text(f"–ü—Ä–æ—Ü–µ—Å—Å —Å ID {pid} –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.", parse_mode=ParseMode.HTML)
        else:
            process.terminate()  # –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            await message.edit_text(f"–ü—Ä–æ—Ü–µ—Å—Å —Å ID {pid} –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.", parse_mode=ParseMode.HTML)
        
    except Exception as e:
        await message.edit_text(f"–û—à–∏–±–∫–∞: {e}", parse_mode=ParseMode.HTML)


def load_and_exec_modules():
    global message_id, chat_id, time_int, success, fail
    sys.path.append(os.path.abspath("modules"))

    for f in os.listdir("modules"):
        if f.endswith(".py"):
            module_name = f[:-3]
            print("--- Loading module "+module_name+"...")
            try:
                module = importlib.import_module(module_name)
                if hasattr(module, 'register_commands'):
                    module.register_commands(app)
                    print("--- Module "+module_name+" loaded!")
                    success+=1
            except Exception as e:
                fail+=1
                print(f"Failed to load module {module_name}: {e}")
    print("--- All modules are loaded! ---")

    for i in range(1, len(sys.argv), 2):
        if sys.argv[i] == "--message_id":
            message_id = int(sys.argv[i + 1])
        elif sys.argv[i] == "--chat_id":
            chat_id = int(sys.argv[i + 1])
        elif sys.argv[i] == "--time":
            time_int = int(sys.argv[i + 1])

async def edit_restart_message():
    global message_id, chat_id, time_int, success, fail
    if message_id is not None and chat_id is not None and time_int is not None:
        await app.edit_message_text(int(chat_id), int(message_id), f"**‚è± –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞! {random.choice(cats)}\n–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è–ª–∞ {int(time.time() - time_int)} —Å–µ–∫\n–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {success} –º–æ–¥—É–ª–µ–π –∏ {fail} —Å –æ—à–∏–±–∫–æ–π.**")

load_and_exec_modules()

async def main():
    await app.start()
    await edit_restart_message()
    await idle()
    await app.stop()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
